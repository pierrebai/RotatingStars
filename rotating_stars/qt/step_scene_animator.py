from .base_scene_animator import base_scene_animator
from . import qt_drawings

from PyQt5.QtGui import QPainter, QTransform
from PyQt5.QtCore import QRectF, QPointF, QLineF

class step_scene_animator(base_scene_animator):
    """
    animator using a Qt graphics scene to show step-by-step changes.
    """

    def __init__(self, star, *args, **kwargs):
        super(step_scene_animator, self).__init__(star, *args, **kwargs)

        self.reset()


    #################################################################
    #
    # Helper functions

    def _get_inner_center(self, which_inner: int):
        inner_center = QPointF(1. - self.star.inner_circle_ratio, 0)
        if which_inner:
            angle = 360. * which_inner / float(self.star.sides - self.star.skip)
            inner_center = QTransform().rotate(angle).map(inner_center)
        return inner_center

    def _gen_dot(self, which_dot: int, which_inner: int):
        inner_center = self._get_inner_center(which_inner)
        dot_pos = QPointF(self.star.inner_circle_ratio * self.star.inner_circle_dot_ratio, 0)
        if which_dot:
            angle = 360.0 * which_dot / float(self.star.skip)
            dot_pos = QTransform().rotate(angle).map(dot_pos)
        dot_pos += inner_center
        dot = qt_drawings.create_disk(qt_drawings.dot_size, qt_drawings.orange_color)
        dot.setPos(dot_pos * qt_drawings.outer_size)
        self.scene.addItem(dot)
        return dot


    #################################################################
    #
    # animator functions

    def reset(self):
        super(step_scene_animator, self).reset()

    def generate_outer_circle(self):
        """
        Draw the outer circle inside which the star will be made.
        """
        circle = qt_drawings.create_circle(qt_drawings.outer_size + qt_drawings.dot_size, qt_drawings.dark_blue_color, qt_drawings.dot_size * 2)
        circle.setPos(0, 0)
        self.scene.addItem(circle)
        self.adjust_view_to_fit()
        return circle

    def generate_inner_circle(self, which_inner: int = 0):
        """
        Draw the inner circle with a radius a fraction of the outer circle.
        That fraction is given as the ratio.
        """
        inner_center = self._get_inner_center(which_inner)
        circle = qt_drawings.create_disk(self.star.inner_circle_ratio * qt_drawings.outer_size)
        circle.setPos(inner_center * qt_drawings.outer_size)
        self.scene.addItem(circle)
        self.adjust_view_to_fit()
        return circle

    def generate_inner_circle_dot(self, which_inner: int = 0):
        """
        Draw the dot on the inner circle at the radius ratio given.
        The ratio should be between 0 and 1.
        """
        dot = self._gen_dot(0, which_inner)
        self.adjust_view_to_fit()
        return dot

    def generate_star(self):
        """
        Draw the star by rotating the inner circle leaving a trail
        formed by the dot on the inner circle, forming the star.
        """
        pass

    def generate_other_inner_circle_dots(self, which_inner: int = 0):
        """
        Draw the other dots on the inner circle that are added
        when the circle passes over the star's spikes.
        """
        dots = []
        for which_dot in range(1, self.star.skip):
            dot = self._gen_dot(which_dot, which_inner)
            dots.append(dot)
        self.adjust_view_to_fit()
        return dots

    def generate_inner_circle_polygon(self, which_inner: int = 0):
        """
        Draw the polygon generated by the inner circle dots.
        """
        inner_center = QPointF(1. - self.star.inner_circle_ratio, 0)
        inner_center = self._get_inner_center(which_inner)
        dots = []
        for i in range(0, self.star.skip):
            dot_pos = QPointF(self.star.inner_circle_ratio * self.star.inner_circle_dot_ratio, 0)
            angle = 360.0 * i / float(self.star.skip)
            dot_pos = QTransform().rotate(angle).map(dot_pos)
            dot_pos += inner_center
            dots.append(dot_pos * qt_drawings.outer_size)

        lines = []
        for i in range(0, self.star.skip):
            line = qt_drawings.create_line(QLineF(dots[i], dots[(i+1) % self.star.skip]))
            self.scene.addItem(line)
            lines.append(line)
        self.adjust_view_to_fit()
        return lines

    def duplicate_inner_circle(self):
        """
        Draw the additional inner circles and their dots and polygon.
        """
        circles = []
        dots = []
        lines = []
        count = self.star.sides - self.star.skip
        for which_inner in range(1, count):
            circles.append(self.generate_inner_circle(which_inner))
            dots.append(self.generate_inner_circle_dot(which_inner))
            dots.extend(self.generate_other_inner_circle_dots(which_inner))
            lines.extend(self.generate_inner_circle_polygon(which_inner))
        return (circles, dots, lines)

    def generate_inter_circle_polygons(self):
        """
        Draw the polygon generated by the corresponding dots
        in all inner circles.
        """
        pass

    def animate_all(self):
        """
        Animate all the inner circles and their polygons.
        """
        pass
